import { describe, it, expect, beforeEach, afterEach } from "vitest";
import { ReactionModel } from "../Reaction.js";
import prisma from "../../prisma.js";

describe("ReactionModel", () => {
  let testUser: any;
  let testTodo: any;

  beforeEach(async () => {
    // „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„Å®Todo„Çí‰ΩúÊàê
    testUser = await prisma.user.create({
      data: {
        email: "test@example.com",
        password: "hashedpassword",
      },
    });

    testTodo = await prisma.todo.create({
      data: {
        title: "Test Todo",
        userId: testUser.id,
      },
    });
  });

  afterEach(async () => {
    // „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    await prisma.reaction.deleteMany();
    await prisma.todo.deleteMany();
    await prisma.user.deleteMany();
  });

  describe("create", () => {
    it("„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†„Åß„Åç„Çã", async () => {
      const reaction = await ReactionModel.create({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "üëç",
      });

      expect(reaction).toMatchObject({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "üëç",
      });
      expect(reaction.id).toBeDefined();
      expect(reaction.createdAt).toBeDefined();
    });

    it("Âêå„Åò„É¶„Éº„Ç∂„Éº„ÅåÂêå„ÅòTodo„Å´Âêå„ÅòÁµµÊñáÂ≠ó„ÇíËøΩÂä†„Åô„Çã„Å®„Ç®„É©„Éº„Å´„Å™„Çã", async () => {
      // ÊúÄÂàù„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†
      await ReactionModel.create({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "üëç",
      });

      // Âêå„Åò„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†„Åó„Çà„ÅÜ„Å®„Åô„Çã
      await expect(
        ReactionModel.create({
          todoId: testTodo.id,
          userId: testUser.id,
          emoji: "üëç",
        })
      ).rejects.toThrow();
    });

    it("Âêå„Åò„É¶„Éº„Ç∂„Éº„ÅåÂêå„ÅòTodo„Å´Áï∞„Å™„ÇãÁµµÊñáÂ≠ó„ÅØËøΩÂä†„Åß„Åç„Çã", async () => {
      await ReactionModel.create({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "üëç",
      });

      const reaction2 = await ReactionModel.create({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "‚ù§Ô∏è",
      });

      expect(reaction2.emoji).toBe("‚ù§Ô∏è");
    });
  });

  describe("delete", () => {
    it("„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂâäÈô§„Åß„Åç„Çã", async () => {
      const reaction = await ReactionModel.create({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "üëç",
      });

      await ReactionModel.delete({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "üëç",
      });

      const found = await prisma.reaction.findUnique({
        where: { id: reaction.id },
      });
      expect(found).toBeNull();
    });
  });

  describe("findByTodo", () => {
    it("Todo ID„Åß„É™„Ç¢„ÇØ„Ç∑„Éß„É≥‰∏ÄË¶ß„ÇíÂèñÂæó„Åß„Åç„Çã", async () => {
      await ReactionModel.create({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "üëç",
      });

      await ReactionModel.create({
        todoId: testTodo.id,
        userId: testUser.id,
        emoji: "‚ù§Ô∏è",
      });

      const reactions = await ReactionModel.findByTodo(testTodo.id);

      expect(reactions).toHaveLength(2);
      expect(reactions.map((r) => r.emoji)).toContain("üëç");
      expect(reactions.map((r) => r.emoji)).toContain("‚ù§Ô∏è");
    });
  });
});
