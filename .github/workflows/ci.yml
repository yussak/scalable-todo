name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_ENV: test

jobs:
  # ======================
  # 1. 静的解析・品質チェック
  # ======================

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [frontend, backend]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'yarn'
  #         cache-dependency-path: ${{ matrix.target }}/yarn.lock
  #     - name: Install dependencies
  #       run: cd ${{ matrix.target }} && yarn install --frozen-lockfile
  #     - name: Run lint
  #       run: cd ${{ matrix.target }} && yarn lint

  # type-check:
  #   name: Type Check
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [frontend, backend]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'yarn'
  #         cache-dependency-path: ${{ matrix.target }}/yarn.lock
  #     - name: Install dependencies
  #       run: cd ${{ matrix.target }} && yarn install --frozen-lockfile
  #     - name: Type check
  #       run: cd ${{ matrix.target }} && npx tsc --noEmit

  build:
    name: Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: ${{ matrix.target }}/yarn.lock
      - name: Install dependencies
        run: cd ${{ matrix.target }} && yarn install --frozen-lockfile
      - name: Build
        run: cd ${{ matrix.target }} && yarn build

  # ======================
  # 2. セキュリティチェック
  # ======================

  # security-audit:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #     - name: Audit frontend dependencies
  #       run: cd frontend && yarn audit --audit-level moderate
  #     - name: Audit backend dependencies
  #       run: cd backend && yarn audit --audit-level moderate
  #     - name: Audit integration test dependencies
  #       run: cd tests && yarn audit --audit-level moderate

  # dependency-review:
  #   name: Dependency Review
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Dependency Review
  #       uses: actions/dependency-review-action@v4

  # ======================
  # 3. テスト（現在実装中）
  # ======================

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        run: cd frontend && yarn install --frozen-lockfile

      - name: Run tests
        run: cd frontend && yarn test:run

      - name: Generate coverage report
        run: cd frontend && yarn test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # test-backend:
  #   name: Backend Tests
  #   runs-on: ubuntu-latest
  #
  #   services:
  #     postgres:
  #       image: postgres:17
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: myapp_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Setup Node.js 20
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: "yarn"
  #         cache-dependency-path: backend/yarn.lock
  #
  #     - name: Install dependencies
  #       run: cd backend && yarn install --frozen-lockfile
  #
  #     - name: Setup test environment
  #       run: |
  #         cd backend
  #         echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/myapp_test" > .env.test
  #         echo "JWT_SECRET=test-secret-key-for-ci" >> .env.test
  #         echo "NODE_ENV=test" >> .env.test
  #
  #     - name: Run database migrations
  #       run: cd backend && npx prisma migrate deploy
  #       env:
  #         DATABASE_URL: postgresql://postgres:password@localhost:5432/myapp_test
  #
  #     - name: Generate Prisma client
  #       run: cd backend && npx prisma generate
  #
  #     - name: Run tests
  #       run: cd backend && yarn test:run
  #       env:
  #         DATABASE_URL: postgresql://postgres:password@localhost:5432/myapp_test
  #
  #     - name: Generate coverage report
  #       run: cd backend && yarn test:coverage
  #       env:
  #         DATABASE_URL: postgresql://postgres:password@localhost:5432/myapp_test
  #
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v4
  #       with:
  #         directory: backend/coverage
  #         flags: backend
  #         name: backend-coverage
  #         fail_ci_if_error: false

  # test-integration:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #
  #   services:
  #     postgres:
  #       image: postgres:17
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: myapp_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Setup Node.js 20
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: "yarn"
  #
  #     - name: Install backend dependencies
  #       run: cd backend && yarn install --frozen-lockfile
  #
  #     - name: Install frontend dependencies
  #       run: cd frontend && yarn install --frozen-lockfile
  #
  #     - name: Install test dependencies
  #       run: cd tests && yarn install --frozen-lockfile
  #
  #     - name: Setup test environment
  #       run: |
  #         cd backend
  #         echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/myapp_test" > .env.test
  #         echo "JWT_SECRET=test-secret-key-for-ci" >> .env.test
  #         echo "NODE_ENV=test" >> .env.test
  #
  #     - name: Run database migrations
  #       run: cd backend && npx prisma migrate deploy
  #       env:
  #         DATABASE_URL: postgresql://postgres:password@localhost:5432/myapp_test
  #
  #     - name: Generate Prisma client
  #       run: cd backend && npx prisma generate
  #
  #     - name: Build backend
  #       run: cd backend && yarn build
  #
  #     - name: Build frontend
  #       run: cd frontend && yarn build
  #
  #     - name: Run integration tests
  #       run: cd tests && yarn test:run
  #
  #     - name: Generate coverage report
  #       run: cd tests && yarn test:coverage
  #
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v4
  #       with:
  #         directory: tests/coverage
  #         flags: integration
  #         name: integration-coverage
  #         fail_ci_if_error: false

  # ======================
  # 4. E2Eテスト
  # ======================

  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: [test-frontend, test-backend]
  #   strategy:
  #     matrix:
  #       browser: [chromium, firefox, webkit]
  #
  #   services:
  #     postgres:
  #       image: postgres:17
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: myapp_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'yarn'
  #
  #     - name: Install all dependencies
  #       run: |
  #         cd frontend && yarn install --frozen-lockfile
  #         cd ../backend && yarn install --frozen-lockfile
  #         cd ../tests && yarn install --frozen-lockfile
  #
  #     - name: Setup test environment
  #       run: |
  #         cd backend
  #         echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/myapp_test" > .env.test
  #         echo "JWT_SECRET=test-secret-key-for-ci" >> .env.test
  #         echo "NODE_ENV=test" >> .env.test
  #
  #     - name: Run database migrations
  #       run: cd backend && npx prisma migrate deploy
  #       env:
  #         DATABASE_URL: postgresql://postgres:password@localhost:5432/myapp_test
  #
  #     - name: Install Playwright
  #       run: cd tests && npx playwright install ${{ matrix.browser }}
  #
  #     - name: Start services
  #       run: |
  #         cd backend && yarn start &
  #         cd ../frontend && yarn start &
  #         sleep 30
  #
  #     - name: Run Playwright tests
  #       run: cd tests && npx playwright test --project=${{ matrix.browser }}
  #
  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report-${{ matrix.browser }}
  #         path: tests/playwright-report/

  # ======================
  # 5. レポート統合
  # ======================

  # test-summary:
  #   name: Test Summary
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [test-frontend, test-backend, test-integration]
  #   steps:
  #     - name: Download all coverage reports
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: coverage-reports
  #
  #     - name: Test Summary
  #       run: |
  #         echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
  #         echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
  #         echo "| Frontend Tests | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| Backend Tests | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| Integration Tests | ${{ needs.test-integration.result }} |" >> $GITHUB_STEP_SUMMARY

  # ======================
  # 6. デプロイ関連（将来実装）
  # ======================

  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [test-frontend, test-backend, test-integration]
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   environment: staging
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Deploy to staging environment
  #       run: echo "Deploy to staging"

  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [test-frontend, test-backend, test-integration]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Deploy to production environment
  #       run: echo "Deploy to production"

  # ======================
  # 7. 通知・その他
  # ======================

  # notify:
  #   name: Notifications
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [test-frontend, test-backend, test-integration]
  #   steps:
  #     - name: Slack notification on failure
  #       if: failure()
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: failure
  #         text: 'CI Pipeline Failed!'
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #
  #     - name: Discord notification on success
  #       if: success()
  #       uses: sarisia/actions-status-discord@v1
  #       with:
  #         webhook: ${{ secrets.DISCORD_WEBHOOK }}
  #         status: success
  #         title: "CI Pipeline Completed Successfully"
