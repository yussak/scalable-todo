name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_ENV: test

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: ${{ matrix.target }}/yarn.lock
      - name: Install dependencies
        run: cd ${{ matrix.target }} && yarn install --frozen-lockfile
      - name: Run lint
        run: cd ${{ matrix.target }} && yarn lint

  build:
    name: Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: ${{ matrix.target }}/yarn.lock
      - name: Install dependencies
        run: cd ${{ matrix.target }} && yarn install --frozen-lockfile
      - name: Build
        run: cd ${{ matrix.target }} && yarn build

  # ======================
  # 2. セキュリティチェック
  # ======================

  # security-audit:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #     - name: Audit frontend dependencies
  #       run: cd frontend && yarn audit --audit-level moderate
  #     - name: Audit backend dependencies
  #       run: cd backend && yarn audit --audit-level moderate
  #     - name: Audit integration test dependencies
  #       run: cd tests && yarn audit --audit-level moderate

  # dependency-review:
  #   name: Dependency Review
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Dependency Review
  #       uses: actions/dependency-review-action@v4

  # ======================
  # 3. テスト
  # ======================

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: cd frontend && yarn install --frozen-lockfile

      - name: Run tests
        run: cd frontend && yarn test:run
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Generate coverage report
        run: cd frontend && yarn test:coverage
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      # 一時的・隔離環境のため平文パスワードを書いている
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_myapp
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: cd backend && yarn install --frozen-lockfile

      - name: Run database migrations
        run: cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ vars.TEST_DATABASE_URL }}
          JWT_SECRET: ${{ vars.TEST_JWT_SECRET }}

      - name: Generate Prisma client
        run: cd backend && npx prisma generate
        env:
          DATABASE_URL: ${{ vars.TEST_DATABASE_URL }}
          JWT_SECRET: ${{ vars.TEST_JWT_SECRET }}

      - name: Run tests
        run: cd backend && yarn test:run
        env:
          DATABASE_URL: ${{ vars.TEST_DATABASE_URL }}
          JWT_SECRET: ${{ vars.TEST_JWT_SECRET }}

      - name: Generate coverage report
        run: cd backend && yarn test:coverage
        env:
          DATABASE_URL: ${{ vars.TEST_DATABASE_URL }}
          JWT_SECRET: ${{ vars.TEST_JWT_SECRET }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: backend/coverage
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # test-integration:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #
  #   services:
  #     postgres:
  #       image: postgres:17
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: myapp_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Setup Node.js 20
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: "yarn"
  #
  #     - name: Install backend dependencies
  #       run: cd backend && yarn install --frozen-lockfile
  #
  #     - name: Install frontend dependencies
  #       run: cd frontend && yarn install --frozen-lockfile
  #
  #     - name: Install test dependencies
  #       run: cd tests && yarn install --frozen-lockfile
  #
  #     - name: Setup test environment
  #       run: |
  #         cd backend
  #         echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/myapp_test" > .env.test
  #         echo "JWT_SECRET=test-secret-key-for-ci" >> .env.test
  #         echo "NODE_ENV=test" >> .env.test
  #
  #     - name: Run database migrations
  #       run: cd backend && npx prisma migrate deploy
  #       env:
  #         DATABASE_URL: postgresql://postgres:password@localhost:5432/myapp_test
  #
  #     - name: Generate Prisma client
  #       run: cd backend && npx prisma generate
  #
  #     - name: Build backend
  #       run: cd backend && yarn build
  #
  #     - name: Build frontend
  #       run: cd frontend && yarn build
  #
  #     - name: Run integration tests
  #       run: cd tests && yarn test:run
  #
  #     - name: Generate coverage report
  #       run: cd tests && yarn test:coverage
  #
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v4
  #       with:
  #         directory: tests/coverage
  #         flags: integration
  #         name: integration-coverage
  #         fail_ci_if_error: false

  # ======================
  # 5. レポート統合
  # ======================

  # test-summary:
  #   name: Test Summary
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [test-frontend, test-backend, test-integration]
  #   steps:
  #     - name: Download all coverage reports
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: coverage-reports
  #
  #     - name: Test Summary
  #       run: |
  #         echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
  #         echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
  #         echo "| Frontend Tests | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| Backend Tests | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| Integration Tests | ${{ needs.test-integration.result }} |" >> $GITHUB_STEP_SUMMARY
